name: Terraform CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_VERSION: "1.12.1"
  AWS_REGION: "us-east-1"

jobs:
  terraform-check:
    name: Terraform Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Comment on PR if format check fails
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Terraform format check failed. Please run `terraform fmt` to fix formatting issues."
            })
      
      - name: Fail job if format check failed
        if: steps.fmt.outcome == 'failure'
        run: exit 1
  
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check
    outputs:
      has-changes: ${{ steps.plan.outputs.has-changes}}
      plan-exitcode: ${{ steps.plan.outputs.exitcode}}

    steps:
      - name: Get Runner IP
        id: ip
        run: echo "runner_ip=$(curl -s http://checkip.amazonaws.com)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION}}
          role-session-name: GithubActions-Plan

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Run Terraform Plan
        id: plan
        run: |
          set +e
          terraform plan -var="my_ip_address=${{ steps.ip.outputs.runner_ip }}" -detailed-exitcode -no-color -out=tfplan
          PLAN_EXIT_CODE=$?
          set -e
          
          echo "exitcode=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $PLAN_EXIT_CODE -eq 0 ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "✅ No changes detected"
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "📋 Changes detected"
          else
            echo "❌ Plan failed with exit code $PLAN_EXIT_CODE"
            exit $PLAN_EXIT_CODE
          fi

      - name: Save Terraform Plan
        if: always()
        run: |
          terraform show -no-color tfplan > plan_output.txt
      
      - name: Upload Plan Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            tfplan
            plan_output.txt

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-check, terraform-plan]
    if: needs.terraform-plan.outputs.has-changes == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Get Runner IP
        id: ip
        run: echo "runner_ip=$(curl -s http://checkip.amazonaws.com)" >> $GITHUB_OUTPUT
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION}}
          role-session-name: GithubActions-Apply

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan

      - name: Run Terraform Apply
        run: |
          terraform apply -var="my_ip_address=${{ steps.ip.outputs.runner_ip }}" -auto-approve tfplan
